/**
 * Software end-user license agreement.
 *
 * The LICENSE.TXT containing the license is located in the JGPSS project.
 * License.txt can be downloaded here:
 * href="http://www-eio.upc.es/~Pau/index.php?q=node/28
 *
 * NOTICE TO THE USER: BY COPYING, INSTALLING OR USING THIS SOFTWARE OR PART OF
 * THIS SOFTWARE, YOU AGREE TO THE   TERMS AND CONDITIONS OF THE LICENSE AGREEMENT
 * AS IF IT WERE A WRITTEN AGREEMENT NEGOTIATED AND SIGNED BY YOU. THE LICENSE
 * AGREEMENT IS ENFORCEABLE AGAINST YOU AND ANY OTHER LEGAL PERSON ACTING ON YOUR
 * BEHALF.
 * IF, AFTER READING THE TERMS AND CONDITIONS HEREIN, YOU DO NOT AGREE TO THEM,
 * YOU MAY NOT INSTALL THIS SOFTWARE ON YOUR COMPUTER.
 * UPC IS THE OWNER OF ALL THE INTELLECTUAL PROPERTY OF THE SOFTWARE AND ONLY
 * AUTHORIZES YOU TO USE THE SOFTWARE IN ACCORDANCE WITH THE TERMS SET OUT IN
 * THE LICENSE AGREEMENT.
 */
package views;

import java.awt.Frame;
import java.util.*;
import java.util.stream.Collectors;
import javax.swing.DefaultComboBoxModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import model.entities.AmperVariable;
import utils.Constants;
import utils.VarGlobals;

/**
 *
 * @author M.Dolores
 * @author Ezequiel Andujar Montes
 */
@SuppressWarnings({"rawtypes", "unchecked"})
public class AmperVariableView extends javax.swing.JDialog {

    private final static long serialVersionUID = 1L;

    AmperVariable amperVariableAux = null;
    int posAmperVariable = -1;

    /**
     * Creates new form PantallaStorages
     *
     * @param parent
     * @param verOK
     */
    public AmperVariableView(Frame parent, boolean verOK) {

        super(parent, Constants.AmperVariableTitle, true);
        initComponents();
        initListeners();
        populateCombo();

        TextValor.setText(getSelectedSavelValue());
        botoOK.setEnabled(false);
        botoSave.setEnabled(false);
        if (!verOK) {
            botoOK.setVisible(false);
        } else {
            String saveValueName = comboAmperVariables.getSelectedItem().toString();
            String saveValue = TextValor.getText();
            botoOK.setEnabled(!saveValueName.isEmpty() && !saveValue.isEmpty());
            botoSave.setVisible(false);
        }
    }

    /**
     * Returns the currently selected Storage value
     *
     * @return
     */
    private String getSelectedSavelValue() {
        return VarGlobals.model.getAmperVariables().stream()//
                .filter(s -> s.getName().equals((String) comboAmperVariables.getSelectedItem()))//
                .map(s -> String.valueOf(s.getValue()))//
                .findFirst()//                 
                .orElse("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        comboAmperVariables = new javax.swing.JComboBox();
        variableLable = new javax.swing.JLabel();
        valueLabel = new javax.swing.JLabel();
        TextValor = new javax.swing.JTextField();
        botoOK = new javax.swing.JButton();
        botoSave = new javax.swing.JButton();
        botoCanel = new javax.swing.JButton();
        typeLabel = new javax.swing.JLabel();
        comboType = new javax.swing.JComboBox();

        jTextField1.setText("jTextField1");

        comboAmperVariables.setEditable(true);
        comboAmperVariables.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboAmperVariablesActionPerformed(evt);
            }
        });

        variableLable.setText("Variable");

        valueLabel.setText("Value");

        TextValor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextValorActionPerformed(evt);
            }
        });

        botoOK.setText("Ok");
        botoOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botoOKActionPerformed(evt);
            }
        });

        botoSave.setText("Save");
        botoSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botoSaveActionPerformed(evt);
            }
        });

        botoCanel.setText("Cancel");
        botoCanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botoCanelActionPerformed(evt);
            }
        });

        typeLabel.setText("Type");

        comboType.setEditable(true);
        comboType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboTypeActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(41, 41, 41)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(botoCanel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 148, Short.MAX_VALUE)
                        .add(botoSave)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(botoOK))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(variableLable, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 130, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(valueLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 148, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(typeLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 234, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(TextValor)
                            .add(comboAmperVariables, 0, 150, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, comboType, 0, 150, Short.MAX_VALUE))))
                .add(61, 61, 61))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(71, 71, 71)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(comboAmperVariables, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(5, 5, 5)
                        .add(variableLable, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(typeLabel)
                    .add(comboType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 12, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(valueLabel)
                    .add(TextValor, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(botoOK)
                    .add(botoSave)
                    .add(botoCanel))
                .add(23, 23, 23))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botoCanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botoCanelActionPerformed
        VarGlobals.continuar = false;
        setVisible(false);
        dispose();
    }//GEN-LAST:event_botoCanelActionPerformed

    private void botoSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botoSaveActionPerformed

        try {
            if (!amperVariableExists(comboAmperVariables.getSelectedItem().toString())) {              
                amperVariableAux = getAmperVariable(comboType.getSelectedItem().toString());
                VarGlobals.model.getAmperVariables().add(amperVariableAux);
                botoOK.setEnabled(true);
                botoOK.setVisible(true);
                populateCombo();
            } else {
                AmperVariable av = getAmperVariable(comboAmperVariables.getSelectedItem().toString());
                
                AmperVariable avf = VarGlobals.model.getAmperVariables().stream()//
                        .filter(a -> a.getName().equals(av.getName()))//
                        .findFirst()//
                        .orElse(null);
                
                if (avf != null) {
                    avf.setValue(av.getValue());
                }                
            }
        } catch (NumberFormatException nf) {
            generarPantallaError(Constants.errorDades);
        }
        VarGlobals.esModificat = true;
    }//GEN-LAST:event_botoSaveActionPerformed

    private AmperVariable getAmperVariable(String type) {
        switch (comboType.getSelectedItem().toString()) {
            case Constants.REAL:
                return new AmperVariable<>((String) comboAmperVariables.getSelectedItem(), new Float(TextValor.getText()));
            case Constants.STRING:
                return new AmperVariable<>((String) comboAmperVariables.getSelectedItem(), TextValor.getText());
            case Constants.INTEGER:
                return new AmperVariable<>((String) comboAmperVariables.getSelectedItem(), Integer.valueOf(TextValor.getText()));
            default:
                return new AmperVariable<>("", "");
        }
    }

    private void generarPantallaError(String mensage) {
        ErrorView perror = new ErrorView(mensage);
        perror.setLocationRelativeTo(this);
        perror.setVisible(true);
        perror.dispose();
    }
    
    private void comboAmperVariablesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboAmperVariablesActionPerformed

        String aVariableName = (String) comboAmperVariables.getSelectedItem();
        String aVariableValue = TextValor.getText();

        if (!aVariableName.isEmpty()) {
            if (amperVariableExists(aVariableName)) {
                TextValor.setText(String.valueOf(amperVariableAux.getValue()));

                if (amperVariableAux.getValue() instanceof Integer) {
                    comboType.getModel().setSelectedItem(Constants.INTEGER);
                } else if (amperVariableAux.getValue() instanceof Float) {
                    comboType.getModel().setSelectedItem(Constants.REAL);
                } else if (amperVariableAux.getValue() instanceof String) {
                    comboType.getModel().setSelectedItem(Constants.STRING);
                }
            }
        }
        botoSave.setEnabled(!aVariableName.isEmpty() && !aVariableValue.isEmpty());
        botoOK.setEnabled(!aVariableName.isEmpty() && !aVariableValue.isEmpty());
        botoOK.setVisible(!aVariableName.isEmpty() && !aVariableValue.isEmpty());
    }//GEN-LAST:event_comboAmperVariablesActionPerformed

    private void botoOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botoOKActionPerformed

        VarGlobals.continuar = true;
        String selectedSaveValue = (String) comboAmperVariables.getSelectedItem();
        VarGlobals.nameSaveValueSelected = selectedSaveValue;
        setVisible(false);
        dispose();
    }//GEN-LAST:event_botoOKActionPerformed

    private void TextValorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextValorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextValorActionPerformed

    private void comboTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboTypeActionPerformed

    private void populateCombo() {
        if (VarGlobals.model.getAmperVariables().size() > 0) {
            comboAmperVariables.setModel(new DefaultComboBoxModel(getAmperVariablesNames(VarGlobals.model.getAmperVariables())));
            comboAmperVariables.setEnabled(true);
            if (amperVariableAux != null) {
                comboAmperVariables.setSelectedItem(amperVariableAux.getName());
                TextValor.setText(String.valueOf(amperVariableAux.getValue()));
            }
        }
        if (comboType.getModel().getSize() == 0) {
            comboType.addItem(Constants.INTEGER);
            comboType.addItem(Constants.STRING);
            comboType.addItem(Constants.REAL);
        }
    }

    private Object[] getAmperVariablesNames(ArrayList<AmperVariable<?>> aVariables) {

        return aVariables.stream()//
                .map(s -> s.getName())//
                .collect(Collectors.toList())//
                .toArray();
    }

    private boolean amperVariableExists(String titol) {
        boolean b = false;
        AmperVariable aV;

        for (int i = 0; ((i < VarGlobals.model.getAmperVariables().size()) && !b); i++) {
            aV = VarGlobals.model.getAmperVariables().get(i);
            if (aV.getName().equals(titol)) {
                amperVariableAux = VarGlobals.model.getAmperVariables().get(i);
                posAmperVariable = i;
                b = true;
            }
        }
        return b;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField TextValor;
    private javax.swing.JButton botoCanel;
    private javax.swing.JButton botoOK;
    private javax.swing.JButton botoSave;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox comboAmperVariables;
    private javax.swing.JComboBox comboType;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel typeLabel;
    private javax.swing.JLabel valueLabel;
    private javax.swing.JLabel variableLable;
    // End of variables declaration//GEN-END:variables

    private void initListeners() {

        TextValor.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                checkInputValues();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                checkInputValues();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                checkInputValues();
            }
        });
    }

    private void checkInputValues() {

        String saveValueName = (String) comboAmperVariables.getSelectedItem();
        String saveValue = TextValor.getText();
        botoSave.setEnabled(!saveValueName.isEmpty() && !saveValue.isEmpty());
    }
}
